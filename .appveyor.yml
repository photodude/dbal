build: false
platform:
  - x64
#matrix:
#  fast_finish: true # kills the build at the first failure
clone_folder: C:\projects\dbal
clone_depth: 1

cache:
  - C:\ProgramData\chocolatey\bin -> .appveyor.yml
  - C:\ProgramData\chocolatey\lib -> .appveyor.yml
  - c:\tools\php -> .appveyor.yml
  - composer.phar
  - '%LOCALAPPDATA%\Composer\files'
  #- vendor

## Build matrix for lowest and highest possible targets
environment:
  matrix:
  - db: sqlite
    driver: pdo_sqlite
    php: 7.0
  - db: sqlite
    driver: pdo_sqlite
    php: 7.1
#  - db: mssql
#    driver: sqlsrv
#    db_version: sql2008r2sp2
#    php: 7.0
#  - db: mssql
#    driver: sqlsrv
#    db_version: sql2008r2sp2
#    php: 7.1
#  - db: mssql
#    driver: pdo_sqlsrv
#    db_version: sql2008r2sp2
#    php: 7.0
#  - db: mssql
#    driver: pdo_sqlsrv
#    db_version: sql2008r2sp2
#    php: 7.1
#  - db: mssql
#    driver: sqlsrv
#    db_version: sql2012sp1
#    php: 7.0
#  - db: mssql
#    driver: sqlsrv
#    db_version: sql2012sp1
#    php: 7.1
#  - db: mssql
#    driver: pdo_sqlsrv
#    db_version: sql2012sp1
#    php: 7.0
#  - db: mssql
#    driver: pdo_sqlsrv
#    db_version: sql2012sp1
#    php: 7.1
#  - db: mssql
#    driver: sqlsrv
#    db_version: sql2014
#    php: 7.0
#  - db: mssql
#    driver: sqlsrv
#    db_version: sql2014
#    php: 7.1
#  - db: mssql
#    driver: pdo_sqlsrv
#    db_version: sql2014
#    php: 7.0
#  - db: mssql
#    driver: pdo_sqlsrv
#    db_version: sql2014
#    php: 7.1
  - db: mssql
    driver: sqlsrv
    db_version: sql2016
    php: 7.0
  - db: mssql
    driver: sqlsrv
    db_version: sql2016
    php: 7.1
  - db: mssql
    driver: pdo_sqlsrv
    db_version: sql2016
    php: 7.0
  - db: mssql
    driver: pdo_sqlsrv
    db_version: sql2016
#    php: 7.1
#  - db: mysql
#    driver: pdo_mysql
#    php: 7.0
#  - db: mysql
#    driver: pdo_mysql
#    php: 7.1
#  - db: mysql
#    driver: mysqli
#    php: 7.0
#  - db: mysql
#    driver: mysqli
#    php: 7.1
#  - db: mariadb
#    driver: pdo_mysql
#    php: 7.0
#  - db: mariadb
#    driver: pdo_mysql
#    php: 7.1
#  - db: postgresql
#    driver: pdo_pgsql
#    php: 7.0
#  - db: postgresql
#    driver: pdo_pgsql
#    php: 7.1

init:
  - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET ANSICON=121x90 (121x90)

## Install PHP and composer, and run the appropriate composer command
install:
    - ps: |
        # Check if installation is cached
        if (!(Test-Path c:\tools\php)) {
          appveyor-retry cinst --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $Env:php | Select-Object -First 1) -replace '[php|]','')
          appveyor-retry cinst -y sqlite

          if ($env:db -eq "mariadb") {
            appveyor-retry cinst -y mariadb
          }

          cd c:\tools\php

          # Set PHP environment items that are always needed        
          copy php.ini-production php.ini
          Add-Content php.ini "`n date.timezone=UTC"
          Add-Content php.ini "`n extension_dir=ext"
          Add-Content php.ini "`n extension=php_openssl.dll"
          Add-Content php.ini "`n extension=php_mbstring.dll"
          Add-Content php.ini "`n extension=php_fileinfo.dll"
          Add-Content php.ini "`n extension=php_pdo_sqlite.dll"
          Add-Content php.ini "`n extension=php_sqlite3.dll"

          # If needed get the MSSQL DLL's
          if ($env:db -eq "mssql") {
            if ($env:php -eq "7.0") {
              $SQLSRV=7
            }
            else {
              $SQLSRV=71
            }
            $Version = $env:php
            cd c:\tools\php\ext
            appveyor-retry appveyor DownloadFile http://windows.php.net/downloads/pecl/releases/sqlsrv/4.1.6.1/php_sqlsrv-4.1.6.1-$($env:php)-nts-vc14-x64.zip
            7z x -y php_sqlsrv-4.1.6.1-$($env:php)-nts-vc14-x64.zip > $null
            appveyor-retry appveyor DownloadFile http://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/4.1.6.1/php_pdo_sqlsrv-4.1.6.1-$($env:php)-nts-vc14-x64.zip
            7z x -y php_pdo_sqlsrv-4.1.6.1-$($env:php)-nts-vc14-x64.zip > $null
            Add-Content php.ini "`n extension=php_sqlsrv.dll"
            Add-Content php.ini "`n extension=php_pdo_sqlsrv.dll"
            Remove-Item c:\tools\php\* -include .zip
            cd c:\tools\php
          }

          # If needed set the the MySQL DLL's
          if ($env:db -eq "mysql" -Or $env:db -eq "mariadb" ) {
          Add-Content php.ini "`n extension=php_pdo_mysql.dll"
          Add-Content php.ini "`n extension=php_mysqli.dll"}

          # If needed set the the postgresql/PGSQL DLL's
          if ($env:db -eq "postgresql") {Add-Content php.ini "`n extension=php_pdo_pgsql.dll"}

          cd c:\projects\dbal

          if (!(Test-Path c:\projects\dbal\composer.phar)) {
            appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar
          }
        }
    - appveyor-retry php composer.phar self-update
    - appveyor-retry php composer.phar install --no-progress --profile

before_test:
# Selectively start the services
  - ps: >-
      if ($env:db -eq "mssql") {
        $instanceName = $env:db_version.ToUpper()
        Start-Service "MSSQL`$$instanceName"
      }
      elseif ($env:db -eq "mysql") {
        Start-Service MySQL57
      }
      elseif ($env:db -eq "postgresql") {
        Start-Service postgresql-x64-9.4
      }

test_script:
  - cd C:\projects\dbal
  - ps: >-
      if ($env:db_version) {
        vendor\bin\phpunit -c tests\appveyor\%db%.%db_version%.%driver%.appveyor.xml
      }
      else {
        vendor\bin\phpunit -c tests\appveyor\%db%.%driver%.appveyor.xml
      }
